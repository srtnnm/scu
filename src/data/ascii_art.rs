use std::collections::BTreeMap;

pub static LETTERS: [(&str, &str); 52] = [
    ("A", "   _   \0  /_\\  \0 / _ \\ \0/_/ \\_\\\0       "),
    ("B", " ___ \0| _ )\0| _ \\\0|___/\0     "),
    ("C", "  ___ \0 / __|\0| (__ \0 \\___|\0      "),
    ("D", " ___  \0|   \\ \0| |) |\0|___/ \0      "),
    ("E", " ___ \0| __|\0| _| \0|___|\0     "),
    ("F", " ___ \0| __|\0| _| \0|_|  \0     "),
    ("G", "  ___ \0 / __|\0| (_ |\0 \\___|\0      "),
    ("H", " _  _ \0| || |\0| __ |\0|_||_|\0      "),
    ("I", " ___ \0|_ _|\0 | | \0|___|\0     "),
    ("J", "    _ \0 _ | |\0| || |\0 \\__/ \0      "),
    ("K", " _  __\0| |/ /\0| ' < \0|_|\\_\\\0       "),
    ("L", " _    \0| |   \0| |__ \0|____|\0      "),
    ("M", " __  __ \0|  \\/  |\0| |\\/| |\0|_|  |_|\0        "),
    ("N", " _  _ \0| \\| |\0| .` |\0|_|\\_|\0      "),
    ("O", "  ___  \0 / _ \\ \0| (_) |\0 \\___/ \0       "),
    ("P", " ___ \0| _ \\\0|  _/\0|_|  \0     "),
    ("Q", "  ___  \0 / _ \\ \0| (_) |\0 \\__\\_\\\0        "),
    ("R", " ___ \0| _ \\\0|   /\0|_|_\\\0     "),
    ("S", " ___ \0/ __|\0\\__ \\\0|___/\0     "),
    ("T", " _____ \0|_   _|\0  | |  \0  |_|  \0       "),
    ("U", " _   _ \0| | | |\0| |_| |\0 \\___/ \0       "),
    ("V", "__   __\0\\ \\ / /\0 \\ V / \0  \\_/  \0       "),
    (
        "W",
        "__      __\0\\ \\    / /\0 \\ \\/\\/ / \0  \\_/\\_/  \0          ",
    ),
    ("X", "__  __\0\\ \\/ /\0 >  < \0/_/\\_\\\0       "),
    ("Y", "__   __\0\\ \\ / /\0 \\ V / \0  |_|  \0       "),
    ("Z", " ____\0|_  /\0 / / \0/___|\0       "),
    ("a", "      \0 __ _ \0/ _` |\0\\__,_|\0      "),
    ("b", " _    \0| |__ \0| '_ \\\0|_.__/\0      "),
    ("c", "    \0 __ \0/ _|\0\\__|\0    "),
    ("d", "    _ \0 __| |\0/ _` |\0\\__,_|\0      "),
    ("e", "     \0 ___ \0/ -_)\0\\___|\0     "),
    ("f", "  __ \0 / _|\0|  _|\0|_|  \0     "),
    ("g", "      \0 __ _ \0/ _` |\0\\__, |\0|___/\0      "),
    ("h", " _    \0| |_  \0| ' \\ \0|_||_|\0      "),
    ("i", " _ \0(_)\0| |\0|_|\0   "),
    ("j", "   _ \0  (_)\0  | |\0 _/ |\0|__/ "),
    ("k", " _   \0| |__\0| / /\0|_\\_\\\0     "),
    ("l", " _ \0| |\0| |\0|_|\0   "),
    ("m", "       \0 _ __  \0| '  \\ \0|_|_|_|\0       "),
    ("n", "      \0 _ _  \0| ' \\ \0|_||_|\0      "),
    ("o", "     \0 ___ \0/ _ \\\0\\___/\0     "),
    ("p", "      \0 _ __ \0| '_ \\\0| .__/\0|_|   "),
    ("q", "      \0 __ _ \0/ _` |\0\\__, |\0   |_|"),
    ("r", "     \0 _ _ \0| '_|\0|_|  \0     "),
    ("s", "    \0 ___\0(_-<\0/__/\0    "),
    ("t", " _   \0| |_ \0|  _|\0 \\__|\0     "),
    ("u", "      \0 _  _ \0| || |\0 \\_,_|\0      "),
    ("v", "     \0__ __\0\\ V /\0 \\_/ \0     "),
    ("w", "        \0__ __ __\0\\ V  V /\0 \\_/\\_/ \0        "),
    ("x", "     \0__ __\0\\ \\ /\0/_\\_\\\0     "),
    ("y", "      \0 _  _ \0| || |\0 \\_, |\0 |__/\0      "),
    ("z", "    \0 ___\0|_ /\0/__|\0"),
];

pub static WHALE: &str = "        .                  \0       \":\"                 \0     ___:____     |\"\\/\"|   \0   ,'        `.    \\  /    \0   |  O        \\___/  |    \0 ~^~^~^~^~^~^~^~^~^~^~^~^~ ";

pub fn generate(text: &str) -> Vec<String> {
    let btm = BTreeMap::from(LETTERS);
    let mut result: Vec<String> = Vec::new();
    let mut buf_letters: Vec<Vec<String>> = Vec::new();
    for c in text.chars() {
        let c = String::from(c);
        if btm.contains_key(c.as_str()) {
            let mut letter: Vec<String> = Vec::new();
            btm.get(c.as_str()).unwrap().split("\0").for_each(|line| {
                letter.push(String::from(line));
            });
            buf_letters.push(letter);
        }
    }
    for i in 0..5 {
        let mut buf: String = String::new();
        buf_letters.iter().for_each(|c| {
            if c.len() > i {
                buf.push_str(&c[i as usize]);
            }
        });
        result.push(buf);
    }
    result
}
